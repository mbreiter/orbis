Java API Basics
===============

This page only contains the basics of the Java API. For the full API, see the Javadocs, `HERE <_static/javadoc/index.html>`_.

.. admonition:: TL;DR
   :class: tldr
   
   The goal of your doMove method is to give each of your FriendlyUnits an action.
   
   The game provides very fast path-finding. See *world.getNextDirectionInPath* and *FriendlyUnit.move(Point destination)*.
   
   The other APIs mostly give you various ways to get the positions of all the things you might want to path-find to.
   
   Note that the orders you give your units are not executed until **after** the turn ends (and your function exits). 
   You can get the actual result of the execution in your next turn with *friendlyUnit.getLastMoveResult()*, *.getLastShotResult()*, and *.getLastPickupResult()*
   
   The *Point*, *PointUtils*, and *Direction* classes have several useful utility methods.
   
All of the available information regarding the game is provided to the doMove method in PlayerAI.
    
.. WARNING::
  Don't change the function definition for doMove. This function is called by the client code (which you also shouldn't modify) because when you submit your file only your PlayerAI file and any additional libraries are kept and any client code is removed. Thus, if you change the method, your code will cause an Exception and ultimately invalidate all of your work.
  

The World
---------

.. image:: images/Map.png
    :align: center
    
The top left coordinate of the world is (0, 0).
    
.. code-block:: java

    //Some sample code given the above map as a world
    world.getControlPoints(); //Returns an array of 2 ControlPoint instances
	//Mainframes are included in the above array. They are control points with .isMainframe() evaluating to true.
	
    world.getPickups(); //Returns an array of 6 Pickup instances
    world.getPositionsOfPickupType(PickupType.WEAPON_LASER_RIFLE); // Returns [ (7, 5), (7, 9) ]
    world.getPositionsOfPickupType(PickupType.WEAPON_RAIL_GUN); // Returns empty array
    world.getNearestControlPoint(new Point(0, 0)); //Returns Control Point at (1, 7)
    world.getNearestControlPoint(new Point(0, 0)).getControllingTeam(); //Returns Team.AMBER
    world.getNextDirectionInPath(new Point(6, 2), new Point(8, 2)); //Returns Direction.SOUTH_WEST
    
Controlling a Unit
------------------

.. image:: images/MapUnits.png
    :align: center
    
*The units in this image have their index in their respective arrays labelled on the tile above them.
The first row and column have been numbered as well. This is for convenience of interpreting the examples below and does not show in the real game.*

**Sample code below uses the above map as a world, and given the Amber units as friendlyUnits (subsequently Blue units are enemyUnits)**

Moving
``````

.. code-block:: java

    //Checking a move
    //---------------
    friendlyUnits[0].checkMove(Direction.NORTH_WEST); 
        //Returns MoveResult.MOVE_VALID. 
        //This will check collisions against the world, and conflicts with other units on your team.
        //Keep in mind that checkMove will not actually move the unit.
        //To order a unit to actually move, see `move` below.
        
    friendlyUnits[3].checkMove(Direction.NORTH); 
        //Returns MoveResult.BLOCKED_BY_WORLD. 
        //Since there is a wall one tile NORTH of Amber unit 3, it won't be able to move there.
    
    //Checking a move to a destination:
    friendlyUnits[0].checkMove(new Point(4, 1));
        //Returns MoveResult.MOVE_VALID.
        //This method will use path finding to figure out which direction to go in.
        //It checks to make sure there is a path to the destination (if there is not then it returns MoveResult.NO_MOVE_ATTEMPTED),
        //as well as collisions against the world, and conflicts with other units on your team.
    
    //Moving a unit
    //-------------
    friendlyUnits[0].move(Direction.NORTH_WEST); 
        //Returns MoveResult.MOVE_VALID, and will move Amber unit 0 to (3, 4) at the end of the turn.
        //This method simply moves the unit in the specified direction, and performs the same checks
        //(and thus has the same return value) as checkMove.
        
    friendlyUnits[0].move(new Point(1, 1)); 
        //Returns MoveResult.MOVE_VALID, and will move Amber unit 0 to (4, 4) at the end of the turn.
        //This method will use path finding to figure out which direction to go in.
        //It checks to make sure there is a path to the destination (if there is not then it returns MoveResult.NO_MOVE_ATTEMPTED),
        //as well as collisions against the world, and conflicts with other units on your team.
    
    //On the next turn
    friendlyUnits[0].getLastMoveResult(); 
        //Returns MoveResult.MOVE_COMPLETED,
        //assuming the move to (1, 1) was executed
    
    //Conflicts with friendly units
    //-----------------------------
    friendlyUnits[3].move(friendlyUnits[2].getPosition()) 
        //Returns MoveResult.MOVE_VALID. 
        //Keep in mind that unless you instruct unit 2 to move somewhere else in your turn, the move will fail,
        //and friendlyUnits[3].getLastMoveResult() will return MoveResult.BLOCKED_BY_FRIENDLY in the next turn.
    
    //Assuming the two calls below are made on the same turn
    friendlyUnits[3].move(Direction.EAST); 
        //Returns MoveResult.MOVE_VALID, and will move Amber unit 3 to (12, 4) at the end of the turn
        
        
    friendlyUnits[2].move(Direction.NORTH); 
        //Returns MoveResult.BLOCKED_BY_FRIENDLY. Even though unit 3 has not yet actually moved, 
        //unit 2's move NORTH will result in a collision.
    
Shooting
````````

.. code-block:: java
    
    //Checking a shot
    //---------------
    friendlyUnits[0].checkShotAgainstEnemy(enemyUnits[1]); 
        //Returns ShotResult.TARGET_OUT_OF_RANGE.
        //This will check to make sure you can hit the given enemy from your current position,
        //and take into consideration the world and your weapon range.
    
    //Let's assume friendlyUnits[1] has a Laser Rifle (5 range, 15 damage)
    friendlyUnits[1].checkShotAgainstEnemy(enemyUnits[2]);
        //Returns ShotResult.CAN_HIT_ENEMY.
        //enemyUnits[2] is in range and not obstructed, so the shot will hit.
        //Keep in mind that you can only shoot the closest enemy, so if there was another enemy between
        //friendlyUnits[1] and enemyUnits[2], this method would return ShotResult.BLOCKED_BY_OTHER_ENEMY
    
    //Shooting:
    //---------
    friendlyUnits[0].shootAt(enemyUnits[1]); 
        //Returns ShotResult.TARGET_OUT_OF_RANGE
        //All though enemyUnits[1] is close enough, shots can only be fired in one of the
        //8 directions.
    
    //Again, let's assume friendlyUnits[1] has a Laser Rifle (5 range, 15 damage)
    friendlyUnits[1].shootAt(enemyUnits[2]); 
        //Returns ShotResult.CAN_HIT_ENEMY, the same result as our 
        //checkShotAgainstEnemy call above (it performs the same checks).
        //If this method is called, enemyUnits[2] will find its face full of laser
        //at the end of the turn.
        
    
    //On the next turn
    friendlyUnits[1].getLastShotResult(); 
        //Returns ShotResult.HIT_ENEMY
        //Assuming the shootAt call above was made.
    
    //After the shot:
    //---------------
    //On the next turn, from the other player's perspective (so friendlyUnits and enemyUnits have swapped)
    friendlyUnits[2].getEnemiesWhoShotMeLastTurn(); 
        //Returns array of just enemyUnits[1], since above it was friendlyUnits[1] (i.e. BRAVO)
        //Since Amber's BRAVO unit was the only unit to shoot Blue's CHARLIE unit,
        //it is the only one in this array.
        
    friendlyUnits[2].getDamageTakenLastTurn(); 
        //Returns 15, since Amber's BRAVO has a Laser Rifle (which does 15 damage)
        //If more units shot us, then this would be the sum of all their shots.
    
Obtaining Pick-ups
``````````````````

.. code-block:: java
    
    //Checking if there is a pick up under Unit 0's (Amber's ALPHA) feet:
    friendlyUnits[0].checkPickupResult(); 
        //Returns PickupResult.NOTHING_TO_PICK_UP, since there is nothing under the unit's feet.
    
    //Trying to pick up will return the same thing as the check above
    friendlyUnits[0].pickupItemAtPosition(); 
        //Returns PickupResult.NOTHING_TO_PICK_UP.
    
    //(Amber) Unit 3 however, has a scatter gun underneath it.
    friendlyUnits[3].pickupItemAtPosition(); 
        //Return PickupResult.PICK_UP_VALID, as there is a scatter gun there.
        //The type of pick up can be determined like this:
    
    world.getPickupAtPosition(friendlyUnits[3].getPosition()).getPickupType();
        //Returns PickupType.WEAPON_SCATTER_GUN
    
    //On the next turn, assuming we executed friendlyUnits[3].pickupItemAtPosition() above
    friendlyUnits[3].getLastPickupResult(); 
        //Returns PickupResult.PICK_UP_COMPLETE, since there was an item.
        //friendlyUnits[3] now has a scatter gun (friendlyUnits[3].getCurrentWeapon() will now return WeaponType.SCATTER_GUN)


Using Shields
`````````````

.. code-block:: java
	
	//Check if we can activate a shield (this will check if we have one in our inventory)
	if (friendlyUnits[0].checkShieldActivation() == ActivateShieldResult.SHIELD_ACTIVATION_VALID) {
		//Activate a shield
		friendlyUnits[0].activateShield(); //Returns ActivateShieldResult.SHIELD_ACTIVATION_VALID, and will activate a shield this turn
	}
	
	//Check if a shield is already active before we activate a new one
	if (friendlyUnits[0].checkShieldActivation() == ActivateShieldResult.SHIELD_ACTIVATION_VALID &&
		friendlyUnits[0].getShieldedTurnsRemaining() <= 0) {
		//Activate a shield
		friendlyUnits[0].activateShield(); //Returns ActivateShieldResult.SHIELD_ACTIVATION_VALID, and will activate a shield this turn
	}
	
	//On the next turn...
	friendlyUnits[0].getShieldedTurnsRemaining(); //Returns 5

		
Utilities
`````````

The API features various utility methods. The more commonly used ones are below.
The full list can be found `HERE <_static/javadoc/index.html>`_.
See the JavaDoc above for full descriptions of the methods.

.. code-block:: java

    //Direction:
    Direction.fromTo(new Point(0, 0), new Point(1, 1)); //Returns Direction.SOUTH_EAST; the direction between two points, i.e. the direction from Point a to Point b
    Direction.NORTH.movePoint(new Point(0, 1)); //Returns new Point(0, 0). Moves a point one tile in the direction
    
    //Point:
    new Point(1, 1).add(new Point(1, 2)); //Returns new Point(2, 3); adds a point instance to another
    new Point(2, 3).subtract(new Point(1, 2)); //Returns new Point(1, 1); subtracts a point from the current instance
    new Point(1, 2).scale(3); //Returns new Point (3, 6); multiplies a point's members by a scalar
    
    //PointUtils:
    PointUtils.chebyshevDistance(new Point(1, 1), new Point(2, 3)) //Returns 2; calculates Chebyshev or Chessboard distance between two points.
    PointUtils.isAInlineWithB(new Point(2, 3), new Point(3, 3)) //Returns true; checks if two points are in a straight vertical, horizontal, or diagonal line from one another
    

      
Path-finding
````````````

For your convenience, we have provided a built-in path-finding algorithm. 
It will provide the shortest possible path, however, it does not avoid enemy or friendly units, taking into account only the world geometry.
The algorithm is used behind the scenes to return results in

::

    world.getNextDirectionInPath(Point start, Point destination)

and

::

    world.getPathLength(Point start, Point destination)
	
and

::

	friendlyUnit.move(Point destination);
    
In maps that have a compiled navigation cache (a <map name>.nac file; all maps created by us have one), the path-finding will be almost instant (run-time complexity `O(1)` ).
On maps without this file, the client will display a warning upon starting, and the path-finding may be substantially slower.
To create a cache for your custom maps, see :doc:`custom_maps`.

If you need more advanced features in your path-finding, you are more than welcome to implement your own algorithm. Just keep an eye on that time limit!
